# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OnlineRoutingMapper
                                 A QGIS plugin
 Generate routes by using online services (Google Directions, Here, MapBox, YourNavigation, OSRM etc.)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-01
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Mehmet Selim BILGIN
        email                : mselimbilgin@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon, QColor
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .OnlineRoutingMapper_dialog import OnlineRoutingMapperDialog
import os.path
from urllib.request import urlopen

from .routeprovider import RouteProvider

from qgis.gui import *
from qgis.core import *

# VT
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import requests

class OnlineRoutingMapper:

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'OnlineRoutingMapper_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Online Routing Mapper')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'OnlineRoutingMapper')
        self.toolbar.setObjectName(u'OnlineRoutingMapper')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OnlineRoutingMapper', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/OnlineRoutingMapper/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Online Routing Mapper'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def clickHandler(self, pointXY):
        if self.no == 0:
            self.startPointXY = QgsPointXY(pointXY)
            self.startRubberBand.removeLastPoint()
            self.startRubberBand.removeLastPoint()
            self.startRubberBand.addPoint(self.startPointXY)
            self.dlg.startTxt.setText(str(pointXY.x()) + ',' + str(pointXY.y()))
        else:
            self.stopPointXY = QgsPointXY(pointXY)
            self.stopRubberBand.removeLastPoint()
            self.stopRubberBand.removeLastPoint()
            self.stopRubberBand.addPoint(self.stopPointXY)
            self.dlg.stopTxt.setText(str(pointXY.x()) + ',' + str(pointXY.y()))
        self.dlg.showNormal()

        # free them
        self.canvas.unsetMapTool(self.clickTool)
        self.clickTool.canvasClicked.disconnect(self.clickHandler)

    def toolActivator(self, no):
        self.no = no
        self.dlg.showMinimized()
        self.clickTool.canvasClicked.connect(self.clickHandler)
        self.canvas.setMapTool(self.clickTool)  # clickTool is activated

    def crsTransform(self, pointXY):
        sourceCRS = self.canvas.mapSettings().destinationCrs()  # getting the project CRS
        destinationCRS = QgsCoordinateReferenceSystem(4326)  # google uses this CRS
        transformer = QgsCoordinateTransform(sourceCRS, destinationCRS,
                                             QgsProject.instance())  # defining a CRS transformer

        outputQgsPoint = transformer.transform(pointXY, QgsCoordinateTransform.ForwardTransform)

        return str(outputQgsPoint.y()) + ',' + str(outputQgsPoint.x())

    def checkNetConnection(self):
        try:
            urlopen('http://www.google.com', timeout=10)
            return True
        except Exception as err:
            pass
        return False

    def routeMaker(self, wktLineString):
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromWkt(wktLineString))
        vectorLayer = QgsVectorLayer('LineString?crs=epsg:4326', 'Routing Result', 'memory')
        layerProvider = vectorLayer.dataProvider()
        vectorLayer.startEditing()
        layerProvider.addFeatures([feature])
        vectorLayer.commitChanges()
        vectorLayer.updateExtents()
        vectorLayer.loadNamedStyle(self.plugin_dir + os.sep + 'OnlineRoutingMapper.qml')
        QgsProject.instance().addMapLayer(vectorLayer)
        destinationCRS = self.canvas.mapSettings().destinationCrs()  # getting the project CRS
        sourceCRS = QgsCoordinateReferenceSystem(4326)
        transformer = QgsCoordinateTransform(sourceCRS, destinationCRS, QgsProject.instance())
        extentForZoom = transformer.transform(vectorLayer.extent(), QgsCoordinateTransform.ForwardTransform)
        self.canvas.setExtent(extentForZoom)
        self.canvas.zoomScale(self.canvas.scale() * 1.03)  # zoom out a little bit.
        QMessageBox.information(self.dlg, 'Information', 'The analysis result was added to the canvas.')

    def runAnalysis(self):
        # if len(self.dlg.startTxt.text()) > 0 and len(self.dlg.stopTxt.text()) > 0:
        if self.startPointXY is not None and self.stopPointXY is not None:
            if self.checkNetConnection():
                startPoint = self.crsTransform(self.startPointXY)
                stopPoint = self.crsTransform(self.stopPointXY)

                index = self.dlg.serviceCombo.currentIndex()
                service = self.services[list(self.services)[index]]
                try:
                    wkt, url = service(startPoint, stopPoint)
                    self.routeMaker(wkt)

                    #clear rubberbands
                    self.startRubberBand.removeLastPoint()
                    self.stopRubberBand.removeLastPoint()
                    self.startRubberBand.removeLastPoint()
                    self.stopRubberBand.removeLastPoint()
                except Exception as err:
                    QgsMessageLog.logMessage(str(err))
                    QMessageBox.warning(self.dlg, 'Analysis Error',
                                        "Cannot calculate the route between the start and stop locations that you entered. Please use other Service APIs.")
            else:
                QMessageBox.warning(self.dlg, 'Network Error!', 'There is no internet connection.')
        else:
            QMessageBox.information(self.dlg, 'Warning', 'Please choose Start Location and Stop Location.')

    def run(self):
        self.no = 0
        # self.startPointXY = None
        # self.stopPointXY = None
        self.dlg = OnlineRoutingMapperDialog()

        # VT
        address = self.dlg.lineEdit.text()+ " rio cuarto"
        x, y = geocode_address(address)
        self.startPointXY = QgsPointXY(-64.3451616313023,-33.12684997058952)
        self.stopPointXY = QgsPointXY(x,y)
        log = canvas.Canvas("/home/tobares/Descargas/log.pdf", pagesize=letter)
        
        message= "Direccion:  {}\npunto comienzo: {}\npunto final: {}".format(address, self.startPointXY, self.stopPointXY)
        agregar_texto_con_saltos_de_linea(log,100, 750, message)
        log.save()
        ########
        
        self.dlg.setFixedSize(self.dlg.size())

        ##defining services and loading combo
        self.services = RouteProvider().services()
        self.dlg.serviceCombo.addItems(list(self.services))

        self.canvas = self.iface.mapCanvas()
        self.clickTool = QgsMapToolEmitPoint(self.canvas)  # clicktool instance generated in here.
        # self.dlg.startBtn.clicked.connect(lambda: self.toolActivator(0))
        # self.dlg.stopBtn.clicked.connect(lambda: self.toolActivator(1))
        self.dlg.runBtn.clicked.connect(self.runAnalysis)

        self.startRubberBand = QgsRubberBand(self.canvas, QgsWkbTypes.PointGeometry)
        self.startRubberBand.setColor(QColor("#000000"))
        self.startRubberBand.setIconSize(10)
        self.startRubberBand.setIcon(QgsRubberBand.ICON_FULL_BOX)
        self.stopRubberBand = QgsRubberBand(self.canvas, QgsWkbTypes.PointGeometry)
        self.stopRubberBand.setColor(QColor("#000000"))
        self.stopRubberBand.setIconSize(10)
        self.stopRubberBand.setIcon(QgsRubberBand.ICON_FULL_BOX)
        
        self.dlg.show()
        self.dlg.closeEvent = self.close

    def close(self, event):
        #clear the rubberbands
        self.canvas.scene().removeItem(self.startRubberBand)
        self.canvas.scene().removeItem(self.stopRubberBand)

# VT
def geocode_address(address):
    base_url = "https://nominatim.openstreetmap.org/search"
    params = {
        "q": address,
        "format": "json",
    }
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data:
            # Extrae las coordenadas (latitud y longitud) del primer resultado
            lat = float(data[0]["lat"])
            lon = float(data[0]["lon"])
            return lon, lat
    return None


def agregar_texto_con_saltos_de_linea(c, x, y, texto):
    lineas = texto.split('\n')
    for linea in lineas:
        c.drawString(x, y, linea)
        y -= 15  # Espacio vertical entre líneas